# Copyright (C) 2021, Sorbonne Universite, LIP6
# This file is part of the Muse project, under the GPL v3.0 license
# See https://www.gnu.org/licenses/gpl-3.0.en.html for license information
# SPDX-License-Identifier: GPL-3.0-only
# Author(s): Quentin L. Meunier

from __future__ import print_function
import sys


nbShares = 4
order = 3
prop = 'ni'
withGlitches = False
withAdditionalRand = False
outfile = 'isw_and_gen.py'



def usage(argv):
    print('Usage: %s [options]' % argv[0])
    print('   This script generates a LeakageVerif file describing a circuit implementing the logical AND following the ISW scheme.')
    print('Options:')
    print('-f,  --outfile <file>       : Set the name of the generated output file to <file> (default: %s)' % outfile)
    print('-n,  --nb-shares <n>        : Set the number of shares in the scheme to <n> (default: %s)' % nbShares)
    print('-o,  --order <n>            : set the order of the verification to (default: %s)' % order)
    print('-p,  --prop                 : Set security property to verify: either \'ni\' (Non-Interference), \'sni\' (Strong Non-Interference) \'rni\' (Relaxed Non-Interference) or \'tps\' (Treshold Probing Security). NI and SNI ise a share description for the inputs, while TPS uses a secrets + masks description (default: %s)' % prop)
    print('-g,  --with-glitches        : Consider glitch propagation throughout gates (defaut: %s)' % (withGlitches and 'Yes' or 'No'))
    print('-ng, --without-glitches     : Do not consider glitch propagation throughout gates (defaut: %s)' % (withGlitches and 'No' or 'Yes'))
    print('-r,  --with-rand            : Use an additional random for computing expressions of the form a_i & b_j,')
    print('                              to transform them into ((a_i ^ r) & b_j) ^ (r & b_j) (defaut: %s)' % (withAdditionalRand and 'Yes' or 'No'))
    print('-nr, --with-rand            : Do not use additional random for computing expressions of the form a_i & b_j (default: %s)' % (withAdditionalRand and 'No' or 'Yes'))


idx = 1
while idx < len(sys.argv):
    arg = sys.argv[idx]
    if arg == '-h' or arg == '--help':
        usage(sys.argv)
        sys.exit(0)
    elif arg == '-f' or arg == '--outfile':
        idx += 1
        outfile = sys.argv[idx]
    elif arg == '-n' or arg == '--nb-shares':
        idx += 1
        nbShares = int(sys.argv[idx])
    elif arg == '-o' or arg == '--order':
        idx += 1
        order = int(sys.argv[idx])
    elif arg == '-p' or arg == '--prop':
        idx += 1
        prop = sys.argv[idx]
    elif arg == '-g' or arg == '--with-glitches':
        withGlitches = True
    elif arg == '-ng' or arg == '--without-glitches':
        withGlitches = False
    elif arg == '-r' or arg == '--with-rand':
        withAdditionalRandom = True
    elif arg == '-nr' or arg == '--without-rand':
        withAdditionalRandom = False
    else:
        print('*** Error: unrecognized option: %s' % arg, file = sys.stderr)
        usage(sys.argv)
        exit(1)
    idx += 1


if order >= nbShares:
    print('*** Error: the order of verification (%d) must be less than the number of shares (%d)' % (order, nbShares))
    sys.exit(1)

if prop != 'ni' and prop != 'sni' and prop != 'tps' and prop != 'rni':
    print('*** Error: Unknown security property: %s' % prop)
    print('    Valid values are: \'ni\' (Non-Interference), \'sni\' (Strong Non-Interference), \'rni\' (Relaxed Non-Interference) and \'tps\' (Treshold Probing Security)')
    sys.exit(1)


nextRandNum = 0
def getNewRandNum():
    global nextRandNum
    v = nextRandNum
    nextRandNum += 1
    return v


content = '''
#!/usr/bin/python

# File generated by generate_isw_and.py

from __future__ import print_function

from verif_msi import *

'''

content += 'order = %d\n' % order
content += 'prop = \'%s\'\n' % prop
content += 'withGlitches = %r\n' % withGlitches
content += 'dumpCirc = False\n'
content += 'checkFunctionality = False\n'
content += '\n'

inputVars = ('a', 'b')
outputVar = 'c'

content += '%s = symbol(\'%s\', \'S\', 1)\n' % (inputVars[0], inputVars[0])
content += '%s = symbol(\'%s\', \'S\', 1)\n' % (inputVars[1], inputVars[1])
content += '\n'


content += 'if prop == \'tps\':\n'
for var in inputVars:
    content += '    %s0' % var
    for i in range(1, nbShares):
        content += ', %s%d' % (var, i)
    content += ' = getPseudoShares(%s, %d)' % (var, nbShares)
    content += '\n'
content += 'else:\n'
for var in inputVars:
    content += '    %s0' % var
    for i in range(1, nbShares):
        content += ', %s%d' % (var, i)
    content += ' = getRealShares(%s, %d)' % (var, nbShares)
    content += '\n'
content += '\n'


for var in inputVars:
    for sh in range(nbShares):
        content += '%s%d = inputGate(%s%d)\n' % (var, sh, var, sh)
content += '\n'


for i in range(nbShares - 1):
    for j in range(i + 1, nbShares):
        content += 'z%d_%d = symbol(\'z%d_%d\', \'M\', 1)\n' % (i, j, i, j)
        content += 'z%d_%d = inputGate(z%d_%d)\n' % (i, j, i, j)
        if withAdditionalRand:
            randNum = getNewRandNum()
            content += 'r%d = symbol(\'r%d\', \'M\', 1)\n' % (randNum, randNum)
            content += 'r%d = inputGate(r%d)\n' % (randNum, randNum)
            content += '%s%d%s%d = xorGate(andGate(xorGate(%s%d, r%d), %s%d), andGate(r%d, %s%d))\n' % (inputVars[0], i, inputVars[1], j, inputVars[0], i, randNum, inputVars[1], j, randNum, inputVars[1], j)
            randNum = getNewRandNum()
            content += 'r%d = symbol(\'r%d\', \'M\', 1)\n' % (randNum, randNum)
            content += 'r%d = inputGate(r%d)\n' % (randNum, randNum)
            content += '%s%d%s%d = xorGate(andGate(xorGate(%s%d, r%d), %s%d), andGate(r%d, %s%d))\n' % (inputVars[0], j, inputVars[1], i, inputVars[0], j, randNum, inputVars[1], i, randNum, inputVars[1], i)
        else:
            content += '%s%d%s%d = andGate(%s%d, %s%d)\n' % (inputVars[0], i, inputVars[1], j, inputVars[0], i, inputVars[1], j)
            content += '%s%d%s%d = andGate(%s%d, %s%d)\n' % (inputVars[0], j, inputVars[1], i, inputVars[0], j, inputVars[1], i)
        content += 'z%d_%d = xorGate(xorGate(z%d_%d, %s%d%s%d), %s%d%s%d)\n' % (j, i, i, j, inputVars[0], i, inputVars[1], j, inputVars[0], j, inputVars[1], i)
content += '\n'


for i in range(nbShares):
    content += '%s%d = andGate(%s%d, %s%d)\n' % (outputVar, i, inputVars[0], i, inputVars[1], i)
    for j in range(nbShares):
        if i != j:
            content += '%s%d = xorGate(%s%d, z%d_%d)\n' % (outputVar, i, outputVar, i, i, j)


content += '\n'
content += 'if checkFunctionality:\n'
content += '    res, v0, v1 = compareExpsWithExev(' + ' ^ '.join(['%s%d.symbExp' % (outputVar, i) for i in range(nbShares)]) + ', %s & %s)\n' % (inputVars[0], inputVars[1])
content += '    if res == None:\n'
content += '        print(\'# functionality (exhaustive evaluation): [OK]\')\n'
content += '    else:\n'
content += '        print(\'# functionality (exhaustive evaluation): [KO]\')\n'
content += '        print(res)\n'
content += '\n'

content += 'if dumpCirc:\n'
content += '    dumpCircuit(\'circuit.dot\', ' + ', '.join(['%s%d' % (outputVar, i) for i in range(nbShares)]) + ')\n'
content += '\n'

content += 'checkSecurity(order, withGlitches, prop, ' + ', '.join(['%s%d' % (outputVar, i) for i in range(nbShares)]) + ')\n'
content += '\n'


f = open(outfile, 'w')
f.write(content)
f.close()



#!/usr/bin/python

# File generated by generate_isw_and.py

from __future__ import print_function

from verif_msi import *

order = 3
prop = 'ni'
withGlitches = False
dumpCirc = False
checkFunctionality = False

a = symbol('a', 'S', 1)
b = symbol('b', 'S', 1)

if prop == 'tps':
    a0, a1, a2, a3 = getPseudoShares(a, 4)
    b0, b1, b2, b3 = getPseudoShares(b, 4)
else:
    a0, a1, a2, a3 = getRealShares(a, 4)
    b0, b1, b2, b3 = getRealShares(b, 4)

a0 = inputGate(a0)
a1 = inputGate(a1)
a2 = inputGate(a2)
a3 = inputGate(a3)
b0 = inputGate(b0)
b1 = inputGate(b1)
b2 = inputGate(b2)
b3 = inputGate(b3)

z0_1 = symbol('z0_1', 'M', 1)
z0_1 = inputGate(z0_1)
a0b1 = andGate(a0, b1)
a1b0 = andGate(a1, b0)
z1_0 = xorGate(xorGate(z0_1, a0b1), a1b0)
z0_2 = symbol('z0_2', 'M', 1)
z0_2 = inputGate(z0_2)
a0b2 = andGate(a0, b2)
a2b0 = andGate(a2, b0)
z2_0 = xorGate(xorGate(z0_2, a0b2), a2b0)
z0_3 = symbol('z0_3', 'M', 1)
z0_3 = inputGate(z0_3)
a0b3 = andGate(a0, b3)
a3b0 = andGate(a3, b0)
z3_0 = xorGate(xorGate(z0_3, a0b3), a3b0)
z1_2 = symbol('z1_2', 'M', 1)
z1_2 = inputGate(z1_2)
a1b2 = andGate(a1, b2)
a2b1 = andGate(a2, b1)
z2_1 = xorGate(xorGate(z1_2, a1b2), a2b1)
z1_3 = symbol('z1_3', 'M', 1)
z1_3 = inputGate(z1_3)
a1b3 = andGate(a1, b3)
a3b1 = andGate(a3, b1)
z3_1 = xorGate(xorGate(z1_3, a1b3), a3b1)
z2_3 = symbol('z2_3', 'M', 1)
z2_3 = inputGate(z2_3)
a2b3 = andGate(a2, b3)
a3b2 = andGate(a3, b2)
z3_2 = xorGate(xorGate(z2_3, a2b3), a3b2)

c0 = andGate(a0, b0)
c0 = xorGate(c0, z0_1)
c0 = xorGate(c0, z0_2)
c0 = xorGate(c0, z0_3)
c1 = andGate(a1, b1)
c1 = xorGate(c1, z1_0)
c1 = xorGate(c1, z1_2)
c1 = xorGate(c1, z1_3)
c2 = andGate(a2, b2)
c2 = xorGate(c2, z2_0)
c2 = xorGate(c2, z2_1)
c2 = xorGate(c2, z2_3)
c3 = andGate(a3, b3)
c3 = xorGate(c3, z3_0)
c3 = xorGate(c3, z3_1)
c3 = xorGate(c3, z3_2)

if checkFunctionality:
    res, v0, v1 = compareExpsWithExev(c0.symbExp ^ c1.symbExp ^ c2.symbExp ^ c3.symbExp, a & b)
    if res == None:
        print('# functionality (exhaustive evaluation): [OK]')
    else:
        print('# functionality (exhaustive evaluation): [KO]')
        print(res)

if dumpCirc:
    dumpCircuit('circuit.dot', c0, c1, c2, c3)

checkSecurity(order, withGlitches, prop, c0, c1, c2, c3)

